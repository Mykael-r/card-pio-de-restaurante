#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 50

typedef struct {
    int id;
    char nome[MAX];
    float preco;
    char categoria[MAX];
} Prato;

void adicionarPrato() {
    FILE *f = fopen("cardapio.dat", "ab");
    if (!f) {
        printf("Erro ao abrir arquivo.\n");
        return;
    }

    Prato p;
    printf("ID: ");
    scanf("%d", &p.id);
    getchar();

    printf("Nome: ");
    fgets(p.nome, MAX, stdin);
    p.nome[strcspn(p.nome, "\n")] = 0;

    printf("Preco: ");
    scanf("%f", &p.preco);
    getchar();

    printf("Categoria: ");
    fgets(p.categoria, MAX, stdin);
    p.categoria[strcspn(p.categoria, "\n")] = 0;

    fwrite(&p, sizeof(Prato), 1, f);
    fclose(f);

    printf("... Prato adicionado com sucesso!\n");
}

void listarPratos() {
    FILE *f = fopen("cardapio.dat", "rb");
    if (!f) {
        printf("Nenhum prato cadastrado ainda.\n");
        return;
    }

    Prato p;
    printf("\n--- CARDAPIO ---\n");
    while (fread(&p, sizeof(Prato), 1, f)) {
        printf("ID: %d | Nome: %s | Preco: R$ %.2f | Categoria: %s\n", p.id, p.nome, p.preco, p.categoria);
    }

    fclose(f);
}

void editarPrato() {
    FILE *f = fopen("cardapio.dat", "rb+");
    if (!f) {
        printf("Erro ao abrir arquivo.\n");
        return;
    }

    int id;
    printf("Digite o ID do prato a editar: ");
    scanf("%d", &id);
    getchar();

    Prato p;
    int encontrado = 0;

    while (fread(&p, sizeof(Prato), 1, f)) {
        if (p.id == id) {
            encontrado = 1;

            printf("Novo nome: ");
            fgets(p.nome, MAX, stdin);
            p.nome[strcspn(p.nome, "\n")] = 0;

            printf("Novo preco: ");
            scanf("%f", &p.preco);
            getchar();

            printf("Nova categoria: ");
            fgets(p.categoria, MAX, stdin);
            p.categoria[strcspn(p.categoria, "\n")] = 0;

            fseek(f, -sizeof(Prato), SEEK_CUR);
            fwrite(&p, sizeof(Prato), 1, f);
            printf("...Prato atualizado!\n");
            break;
        }
    }

    if (!encontrado)
        printf("Erro: Prato com ID %d nao encontrado.\n", id);

    fclose(f);
}

void removerPrato() {
    FILE *f = fopen("cardapio.dat", "rb");
    if (!f) {
        printf("Erro ao abrir arquivo.\n");
        return;
    }

    FILE *temp = fopen("temp.dat", "wb");
    if (!temp) {
        printf("Erro ao criar arquivo temporario.\n");
        fclose(f);
        return;
    }

    int id;
    printf("Digite o ID do prato a remover: ");
    scanf("%d", &id);

    Prato p;
    int removido = 0;

    while (fread(&p, sizeof(Prato), 1, f)) {
        if (p.id == id) {
            removido = 1;
            continue;
        }
        fwrite(&p, sizeof(Prato), 1, temp);
    }

    fclose(f);
    fclose(temp);

    remove("cardapio.dat");
    rename("temp.dat", "cardapio.dat");

    if (removido)
        printf("...Prato removido com sucesso!\n");
    else
        printf("Erro: Prato com ID %d nao encontrado.\n", id);
}

void buscarPorNome() {
    FILE *f = fopen("cardapio.dat", "rb");
    if (!f) {
        printf("Erro ao abrir arquivo.\n");
        return;
    }

    char nomeBusca[MAX];
    printf("Digite o nome ou parte do nome: ");
    getchar();
    fgets(nomeBusca, MAX, stdin);
    nomeBusca[strcspn(nomeBusca, "\n")] = 0;

    Prato p;
    int achou = 0;

    printf("\n--- RESULTADOS DA BUSCA ---\n");
    while (fread(&p, sizeof(Prato), 1, f)) {
        if (strstr(p.nome, nomeBusca)) {
            printf("ID: %d | Nome: %s | Preco: R$ %.2f | Categoria: %s\n", p.id, p.nome, p.preco, p.categoria);
            achou = 1;
        }
    }

    if (!achou)
        printf("Nenhum prato encontrado com esse nome.\n");

    fclose(f);
}

void salvarEmTxt() {
    FILE *bin = fopen("cardapio.dat", "rb");
    if (!bin) {
        printf("Erro ao abrir arquivo binario.\n");
        return;
    }

    FILE *txt = fopen("cardapio.txt", "w");
    if (!txt) {
        printf("Erro ao criar arquivo de texto.\n");
        fclose(bin);
        return;
    }

    Prato p;
    while (fread(&p, sizeof(Prato), 1, bin)) {
        fprintf(txt, "ID: %d\nNome: %s\nPreco: R$ %.2f\nCategoria: %s\n\n",
                p.id, p.nome, p.preco, p.categoria);
    }

    fclose(bin);
    fclose(txt);

    printf("... Dados exportados para 'cardapio.txt' com sucesso!\n");
}

void salvarEmCSV() {
    FILE *bin = fopen("cardapio.dat", "rb");
    if (!bin) {
        printf("Erro ao abrir arquivo binario.\n");
        return;
    }

    FILE *csv = fopen("cardapio.csv", "w");
    if (!csv) {
        printf("Erro ao criar arquivo CSV.\n");
        fclose(bin);
        return;
    }

    // Cabeçalho CSV
    fprintf(csv, "ID,Nome,Preco,Categoria\n");

    Prato p;
    while (fread(&p, sizeof(Prato), 1, bin)) {
        fprintf(csv, "%d,\"%s\",%.2f,\"%s\"\n", p.id, p.nome, p.preco, p.categoria);
    }

    fclose(bin);
    fclose(csv);

    printf("... Dados exportados para 'cardapio.csv' com sucesso!\n");
}

void menu() {
    int opcao;

    do {
        printf("\n--- MENU DO RESTAURANTE ---\n");
        printf("1. Adicionar prato\n");
        printf("2. Listar todos os pratos\n");
        printf("3. Editar prato\n");
        printf("4. Remover prato\n");
        printf("5. Buscar por nome\n");
        printf("6. Exportar para TXT\n");
        printf("7. Exportar para CSV\n");
        printf("0. Sair\n");
        printf("Escolha uma opcao: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1: adicionarPrato(); break;
            case 2: listarPratos(); break;
            case 3: editarPrato(); break;
            case 4: removerPrato(); break;
            case 5: buscarPorNome(); break;
            case 6: salvarEmTxt(); break;
            case 7: salvarEmCSV(); break;
            case 0: printf("Saindo...\n"); break;
            default: printf("?? Opcao invalida.\n");
        }

    } while (opcao != 0);
}

int main() {
    menu();
    return 0;
}

